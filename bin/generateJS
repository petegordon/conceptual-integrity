#!/usr/bin/env node

'use strict';

var fs = require('fs');
var sqlite3 = require('sqlite3').verbose();
var HTMLing = require('htmling');

function DatabaseMetadata(databaseName){
  this.dbName = databaseName;
  this.name = (databaseName.indexOf('.') >= 0) ? databaseName.split('.')[0] : databaseName;
  this.objectName = DatabaseMetadata.readableName(databaseName.split('.')[0], true);
  this.db = new sqlite3.Database(databaseName);
  this.tables = [];
}
DatabaseMetadata.prototype.getDatabaseTableColumns = function(databaseTable, fnCallback){
  this.db.all("PRAGMA table_info("+databaseTable.dbName+")", function(err, columns){
    for(var j=0; j<columns.length; j++){
      var columnRow = columns[j];
      var c = new Column(j, columnRow.name, columnRow.type, ((columnRow.notnull)?true:false), columnRow.dflt_value, columnRow.pk);
      databaseTable.addColumn(c);
    }
    databaseTable.getPrimaryKeys();
    fnCallback(databaseTable);
  });
}

DatabaseMetadata.prototype.getDatabaseTableForeignKeyConstraints = function(databaseTable, fnCallback){
  this.db.all("PRAGMA foreign_key_list("+databaseTable.dbName+")", function(err, foreignKeys){
    for(var j=0; j<foreignKeys.length; j++){
      databaseTable.getColumn(foreignKeys[j].from).isForeignKey = true;
      databaseTable.getColumn(foreignKeys[j].from).foreignTable = foreignKeys[j].table;
      databaseTable.getColumn(foreignKeys[j].from).foreignColumnName = foreignKeys[j].to;
      var foreignKeyColumn = databaseTable.getColumn(foreignKeys[j].from);
      databaseTable.addForeignKeyColumn(foreignKeyColumn);
      databaseTable.addForeignKeyConstraint(foreignKeys[j]);
    }

    fnCallback(databaseTable);
  });
}
DatabaseMetadata.prototype.getDatabaseTables = function(fnCallback){
  var allTables = [];
  var dbMeta = this;
  dbMeta.db.all("SELECT name FROM sqlite_master WHERE type='table';", function(err, tables){

    var tableCount = 0;

    /**
     * CREATE JAVASCRIPT TABLE FROM ALL BUT THE SQLITE SYSTEM TABLES
     */
    for(var i=0; i<tables.length; i++){
      if(!tables[i].name.indexOf('sqlite') == 0){
        var t = new Table(tables[i].name);
        allTables.push(t);
      }
    }

    /**
     * POPULATE ALL TABLES WITH COLUMNS
     */
    dbMeta.db.serialize(function() {
      for(var k=0; k<allTables.length; k++){
        dbMeta.getDatabaseTableColumns(allTables[k], function(databaseTable){
          dbMeta.getDatabaseTableForeignKeyConstraints(databaseTable, function(databaseTable){
              tableCount++;
              databaseTable.setColumnsNotKeys();
              if(allTables.length == tableCount){
                dbMeta.tables = allTables;
                fnCallback(dbMeta);
              }
            });
          });
      }
    });

  });

}
DatabaseMetadata.prototype.generateStrings = function(){
  console.log('Database.prototype.generateStrings');

  for(var i=0; i<this.tables.length; i++){
    var currentTable = this.tables[i];

    DatabaseMetadata.signatureSQLFromColumns(currentTable, "queryByForeignKey", currentTable.getForeignKeys(), currentTable.foreignKeySignatureSQLs);
    DatabaseMetadata.signatureSQLFromColumns(currentTable, "queryByPrimaryKey", currentTable.getPrimaryKeys(), currentTable.primaryKeySignatureSQLs);


    console.log('table:'+currentTable.name);
    if(this.tables[i].getForeignKeys().length >0){
      for(var j=0; j<currentTable.getForeignKeys().length; j++){
        var currentForeignKeyColumn = currentTable.getForeignKeys()[j];
        for(var k=0; k<this.tables.length; k++){
          var foreignTable = this.tables[k];

          if(foreignTable.dbName == currentForeignKeyColumn.foreignTable){
            console.log('found foreign key recipricating table');
            console.log('foreign table:');
            console.log(currentTable.dbName+'.'+currentForeignKeyColumn.dbName+'  <->  '+foreignTable.dbName+'.'+currentForeignKeyColumn.foreignColumnName);
            //console.log(foreignTable);
//
            var relatedTables = [];
            var columns = [];
            columns.push(currentForeignKeyColumn);

            DatabaseMetadata.signatureSQLFromColumns(currentTable, "queryByForeignKey", columns, relatedTables);
            var relatedTable = {};
            relatedTable.name = currentTable.name;
            relatedTable.signature = relatedTables[0].signature;
            relatedTable.signatureParams = 'this.'+currentForeignKeyColumn.foreignColumnName;
            foreignTable.relatedTables.push(relatedTable);
            console.log('------ RELATED TABLE SQL SIGNATURE----');
            console.log(relatedTable);

          }
        }
      }
    }

  }

}
DatabaseMetadata.signatureSQLFromColumns = function(table, methodText, columns, signatures){
  if(columns.length > 0){
    if(columns.length > 1){
      var str = methodText + 's';
      str = DatabaseMetadata.methodSignature(str, columns);
      var colsNameArray = [];
      for(var j=0; j<columns.length; j++){
        colsNameArray.push(columns[j].varName);
      }
      var whereCols = colsNameArray.join(' = ? and ');
      whereCols = whereCols + ' = ?'
      var signatureSQL = new SignatureSQL(str, colsNameArray, 'select * from '+table.dbName+' where '+whereCols);
      signatures.push(signatureSQL);
    }
    for(var j=0; j<columns.length; j++){
      var str = methodText;
      var col = columns[j];
      var cols = [];
      cols.push(col);
      str = DatabaseMetadata.methodSignature(str, cols);
      var colsNameArray = [];
      colsNameArray.push(col.varName);
      var signatureSQL = new SignatureSQL(str, colsNameArray, 'select * from '+table.dbName+' where '+col.dbName+' = ?');
      signatures.push(signatureSQL);

    }
  }
}
DatabaseMetadata.methodSignature = function(str, methodColumnParams){
  for(var j=0; j<methodColumnParams.length; j++){
    var columnParam = methodColumnParams[j];
    if(j != 0){
      str = str + "And";
    }
    str = str + columnParam.objectRefName;
  }
  return str;
}
DatabaseMetadata.readableName = function(name, isFirstLetterToBeCapitalized){

  //if isFirstLetterToBeCapitalized change first letter to capital if[a-z]
  if(isFirstLetterToBeCapitalized){
    name =  name.charAt(0).toUpperCase() + name.slice(1)
  }
  //remove underscores
  var nameParts = name.split('_');
  var newName = nameParts[0];
  //all first letters after under score to capital letter if[a-z]
  for(var i=1; i<nameParts.length; i++){
    newName = newName + (nameParts[i].charAt(0).toUpperCase() + nameParts[i].slice(1));
  }

  return newName;
}

function Table(tableName){
  this.dbName = tableName;
  this.name = DatabaseMetadata.readableName(tableName, true);
  this.columns = [];
  this.columnsNotKey = [];
  this.columnsNotPrimaryKey = [];
  this.foreignKeyColumns = [];
  this.foreignKeyConstraints = [];
  this.primaryKeyColumns = null;
  this.primaryKeysCount;
  /**
   * Had to add strings because template engine was too slow!
   * With conditional (if) inside loops (repeat)
   */
   this.foreignKeySignatureSQLs = [];
   this.primaryKeySignatureSQLs = [];

   this.relatedTables = []

}
function SignatureSQL(signature, columnNamesArray, sql, objectName){
  this.signature = signature;
  this.columnNamesArray = columnNamesArray;
  this.sql = sql;
  this.signatureParams = columnNamesArray.join(', ');
  this.objectName = objectName;
}
Table.prototype.getColumn = function getColumn(columnName){
  for(var i=0; i<this.columns.length; i++){
    if(this.columns[i].dbName === columnName){
      return this.columns[i];
    }
  }
  return null;
}
Table.prototype.getColumns = function getColumns(){
  return this.columns;
}
Table.prototype.addColumn = function addColumn(c){
  this.columns.push(c);
}
Table.prototype.setColumnsNotKeys = function(){
  for(var i=0; i<this.columns.length; i++){
    if(!this.columns[i].isForeignKey && this.columns[i].primaryKeyIndex == 0){
      this.columnsNotKey.push(this.columns[i]);
    }
    if(this.columns[i].primaryKeyIndex == 0){
       this.columnsNotPrimaryKey.push(this.columns[i]);
    }
  }
}
/**
 * TODO::This does not support multiple Column in single Foreign Key definition
 */
Table.prototype.addForeignKeyConstraint = function addForeignKeyConstraint(fk){
  this.foreignKeyConstraints.push(fk);
}
Table.prototype.addForeignKeyColumn = function addForeignKeyColumn(fk){
  this.foreignKeyColumns.push(fk);
}
Table.prototype.getForeignKeys = function getForeignKeys(){
  return this.foreignKeyColumns;
}
Table.prototype.getPrimaryKeys = function getPrimaryKeys(){
  if(this.primaryKeyColumns === null){
    this.primaryKeyColumns = []
    for(var i=0; i<this.columns.length; i++){
      if(this.columns[i].primaryKeyIndex > 0){
        this.primaryKeyColumns.push(this.columns[i]);
      }
    }
    this.primaryKeyCount = this.primaryKeyColumns.length;
  }
  return this.primaryKeyColumns;
}
function Column(index, columnName, dataType, notNull, defaultValue, primaryKeyIndex, objectName){
  this.index = index;
  this.dbName = columnName;
  this.varName = DatabaseMetadata.readableName(columnName, false);
  this.objectRefName = DatabaseMetadata.readableName(columnName, true);
  this.objectName = DatabaseMetadata.readableName(columnName.slice(0, columnName.lastIndexOf('_')), true);
  this.dataType = dataType;
  this.notNull = notNull;
  this.defaultValue = defaultValue;
  this.primaryKeyIndex = primaryKeyIndex;
};

function testDatabaseMetadataReadableName(){
  console.log(DatabaseMetadata.readableName('hello_world', true) === 'HelloWorld');
  console.log(DatabaseMetadata.readableName('hello_world', false) === 'helloWorld');
  console.log(DatabaseMetadata.readableName('_n_p_i', true) === 'NPI');
}



if(process.argv.length < 3){
  console.log('----ERROR::Please provide sql script or -db [database] to generate Javascript');
  return;
}
var dbName = '';
if(process.argv[2] != '-db'){
  var sqlScript = process.argv[2];
  var newDBName = (sqlScript.indexOf('.') >= 0) ? sqlScript.split('.')[0] : sqlScript;
  dbName = newDBName + '.db';
} else {
  dbName = process.argv[3];
}
var DatabaseMetadataObject = new DatabaseMetadata(dbName);
if(process.argv[2] != '-db'){
  var sqlScript = fs.readFileSync(process.cwd()+'/'+process.argv[2], "utf8")
  createDatabase(sqlScript, function(){
    createDatabaseMetadata();
  });
} else {
  createDatabaseMetadata();
}

function createDatabase(sqlScript, fnCallback){
//  console.log(sqlScript);
  DatabaseMetadataObject.db.exec(sqlScript, function(err){
    console.log('finished creating database');
    if(err){
      console.log('ERROR::createDatabase ERROR:'+err)
      fnCallback(err);
    }
    if(typeof fnCallback != 'undefined'){
      fnCallback();
    }
  });

}
function createDatabaseMetadata(){
  DatabaseMetadataObject.getDatabaseTables(function(databaseMetadata){

    console.log('finish instantiating DataabaseMetadata');
  //  console.log(databaseMetadata);

    databaseMetadata.generateStrings();

    try {
      fs.mkdirSync(databaseMetadata.name);
    } catch(e) {
      if ( e.code != 'EEXIST' ) throw e;
    }

    for(var i=0; i<databaseMetadata.tables.length; i++){
      var template = HTMLing.file(__dirname+"/generateJS.template.html");
      var obj = {t:databaseMetadata.tables[i]};
//      console.log(obj);
      var jsFile = template.render(obj);

//      console.log('--------------'+databaseMetadata.tables[i].dbName);

      fs.writeFileSync(process.cwd()+'/'+databaseMetadata.name+'/'+databaseMetadata.tables[i].name+'.js', jsFile);
//      console.log(jsFile);
      console.log("The file was saved!");
    }


    var exampleAppTemplate = HTMLing.file(__dirname+'/'+"generateAppJS.template.html");
    var exampleAppJSFile = exampleAppTemplate.render(databaseMetadata);
    fs.writeFileSync(process.cwd()+'/'+databaseMetadata.name+'/'+'app'+'.js', exampleAppJSFile);

  });
}
